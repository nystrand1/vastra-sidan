// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Membership {
  id             String          @id @default(cuid())
  name           String
  wordpressId    String
  imageUrl       String
  textureUrl     String?
  type           MembershipType
  price          Int
  startDate      DateTime
  endDate        DateTime
  users          User[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  members        Member[]

  @@index([wordpressId])
}

enum MembershipType {
  FAMILY
  YOUTH
  REGULAR
}

model Member {
  id                      String        @id @default(cuid())
  memberToken             String        @unique @default(cuid())
  firstName               String
  lastName                String
  email                   String        @unique
  phone                   String
  memberships             Membership[]
  familyMemberShipOwnerId String?
  familyMemberShipOwner   Member?       @relation("FamilyMembers", fields: [familyMemberShipOwnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  familyMembers           Member[]      @relation("FamilyMembers")
  stripePayments          StripePayment[]
  stripeRefunds           StripeRefund[]
  

  @@index([familyMemberShipOwnerId])
  @@index([memberToken])
}

model User {
  id                  String          @id @default(cuid())
  firstName           String          @default("VÃ¤stra")
  lastName            String          @default("Sidan")
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  phone               String?
  role                Role            @default(USER)
  accounts            Account[]
  sessions            Session[]
  memberShips         Membership[]
  eventParticipations Participant[]
  stripePayments      StripePayment[]
  stripeRefunds       StripeRefund[]
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VastraEvent {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  name             String
  description      String        @db.Text
  date             DateTime
  defaultPrice     Float
  memberPrice      Float
  youthPrice       Float
  youthMemberPrice Float
  active           Boolean       @default(true)
  participants     Participant[]
  buses            Bus[]
}

model Bus {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  name       String
  seats      Int
  event      VastraEvent   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
  passengers Participant[]

  @@index([eventId])
}

model Participant {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  name              String
  email             String
  phone             String
  note              String?         @db.Text
  event             VastraEvent     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId           String
  bus               Bus?            @relation(fields: [busId], references: [id])
  busId             String?
  cancellationToken String?         @default(uuid())
  cancellationDate  DateTime?
  payAmount         Float?
  checkedIn         Boolean         @default(false)
  member            Boolean         @default(false)
  youth             Boolean         @default(false)
  userEmail         String?
  user              User?           @relation(fields: [userEmail], references: [email])
  stripePayments    StripePayment[]
  stripeRefunds     StripeRefund[]

  @@index([eventId])
  @@index([busId])
  @@index([userEmail])
}

model StripePayment {
  id              String              @id @default(cuid())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  stripePaymentId String
  amount          Float
  netAmount       Float               @default(0) 
  members         Member[]
  participants    Participant[]
  userId          String?
  user            User?               @relation(fields: [userId], references: [id])
  status          StripePaymentStatus
  stripeRefunds   StripeRefund[]

  @@index([stripePaymentId])
  @@index([userId])
}

enum StripePaymentStatus {
  REQUIRES_PAYMENT_METHOD
  REQUIRES_CONFIRMATION
  REQUIRES_ACTION
  PROCESSING
  SUCCEEDED
  CANCELED
  CREATED
}

model StripeRefund {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  stripeRefundId    String
  amount            Float
  status            StripeRefundStatus
  errorMessage      String?
  errorCode         String?
  participantId     String?
  participant       Participant?       @relation(fields: [participantId], references: [id])
  members           Member[]
  userId            String?
  user              User?              @relation(fields: [userId], references: [id])
  originalPaymentId String
  originalPayment   StripePayment      @relation(fields: [originalPaymentId], references: [id])

  @@index([id])
  @@index([participantId])
  @@index([originalPaymentId])
  @@index([userId])
}

enum StripeRefundStatus {
  CREATED
  REFUNDED
  ERROR
}

model TicketSalesRecord {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  ticketsSold   Int
  fotballGame   FotballGame? @relation(fields: [fotballGameId], references: [id])
  fotballGameId String?

  @@index([fotballGameId])
}

model FotballGame {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  date               DateTime
  homeTeam           String
  awayTeam           String
  ticketLink         String
  location           String
  ticketSalesRecords TicketSalesRecord[]
}
