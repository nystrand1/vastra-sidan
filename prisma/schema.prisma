// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Membership {
  id                   String                 @id @default(cuid())
  imageUrl             String
  type                 MembershipType
  price                Int
  startDate            DateTime
  endDate              DateTime
  users                User[]
  swishPayments        SwishPayment[]
}

enum MembershipType {
  FAMILY
  YOUTH
  REGULAR
}

model User {
  id                    String       @id @default(cuid())
  firstName             String       @default("VÃ¤stra")
  lastName              String       @default("Sidan")
  email                 String?      @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  phone                 String?
  role                  Role         @default(USER)
  accounts              Account[]
  sessions              Session[]
  memberShips           Membership[]
  eventParticipations   Participant[]
  swishPayments         SwishPayment[]
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VastraEvent {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  name             String
  description      String        @db.Text
  date             DateTime
  defaultPrice     Float
  memberPrice      Float
  youthPrice       Float
  youthMemberPrice Float
  participants     Participant[]
  buses            Bus[]
}

model Bus {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  name       String
  seats      Int
  event      VastraEvent   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
  passengers Participant[]

  @@index([eventId])
}

model Participant {
  id                String         @id @default(cuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  name              String
  email             String
  phone             String
  note              String?        @db.Text
  event             VastraEvent    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId           String
  bus               Bus?           @relation(fields: [busId], references: [id])
  busId             String?
  cancellationToken String?        @default(uuid())
  cancellationDate  DateTime?
  swishPayments     SwishPayment[]
  payAmount         Float?
  checkedIn         Boolean        @default(false)
  member            Boolean        @default(false)
  youth             Boolean        @default(false)
  swishRefunds      SwishRefund[]
  userEmail         String?
  user              User?          @relation(fields: [userEmail], references: [email])

  @@index([eventId])
  @@index([busId])
  @@index([userEmail])
}

model SwishPayment {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  paymentId         String
  paymentRequestUrl String
  paymentReference  String?
  payerAlias        String
  payeeAlias        String
  amount            Float
  message           String?
  status            SwishPaymentStatus
  errorCode         String?
  errorMessage      String?
  participants      Participant[]
  refunds           SwishRefund[]
  memberShipId      String?
  memberShip        Membership? @relation(fields: [memberShipId], references: [id])
  userId            String?
  user              User? @relation(fields: [userId], references: [id])

  @@index([paymentId])
  @@index([memberShipId])
  @@index([userId])
}

enum SwishPaymentStatus {
  CREATED
  PAID
  DECLINED
  ERROR
  CANCELLED
}

model SwishRefund {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  refundId         String
  paymentId        String
  paymentReference String?
  payerAlias       String
  payeeAlias       String
  amount           Float
  message          String?
  status           SwishRefundStatus
  errorCode        String?
  errorMessage     String?
  dateRefunded     DateTime?
  participantId    String
  participant      Participant       @relation(fields: [participantId], references: [id])
  originalPayment  SwishPayment      @relation(fields: [paymentId], references: [id])

  @@index([refundId])
  @@index([participantId])
  @@index([paymentId])
}

enum SwishRefundStatus {
  CREATED
  DEBITED
  VALIDATED
  PAID
  ERROR
}
